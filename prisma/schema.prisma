// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Article {
  id  Int    @id @default(autoincrement())
  url String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  title   String
  desc    String?
  content String // @db.Text

  views           Int              @default(0)
  articleComments ArticleComment[]
}

model ArticleComment {
  id Int @id @default(autoincrement())

  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content String // @db.Text
}

model Service {
  id  Int    @id @default(autoincrement())
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  price    Float   @default(0)
  desc     String // @db.Text
  install  String? // @db.Text
  features String? // @db.Text

  views     Int @default(0)
  purchases Int @default(0)
  downloads Int @default(0)

  icon   String?
  banner String?

  gitLink    String?
  openSource Boolean @default(true)

  requests Request[]
}

model Request {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serviceId Int?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: NoAction)

  timeframe Int
  content   String // @db.Text
  startDate DateTime?
  price     Float

  requestComments RequestComment[]
}

model RequestComment {
  id Int @id @default(autoincrement())

  requestId Int
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content String // @db.Text
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  credit Float @default(0)

  aboutMe   String // @db.Text
  showEmail Boolean @default(false)

  experiences Experience[]
  skills      Skill[]

  permissions Permission[]

  Article        Article[]
  Request        Request[]
  ArticleComment ArticleComment[]
  RequestComment RequestComment[]
}

model Experience {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  startDate DateTime?
  endDate   DateTime?

  title String
  desc  String
}

model Skill {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title String
  desc  String
}

model Permission {
  name   String  @id
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
